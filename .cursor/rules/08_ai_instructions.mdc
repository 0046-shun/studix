# AI実装ハンドリング指示書

> **重要**: このドキュメントは常に読み込まれています。実装判断に迷った時の指針です。

## 🎯 【最重要】AI自動判断ルール

### 🔀 技術選択の判断
```
IF architecture/system-architecture.md に技術スタックが指定済み THEN
    指定された技術スタックを厳守
ELSE IF 既存コードに類似パターンがある THEN
    既存パターンを踏襲
ELSE
    実装停止 → 人間開発者に確認要求
END
```

### 🔀 実装パターンの判断
```
IF features/[機能名].md に実装例がある THEN
    その例をベースにパターン踏襲
ELSE IF 類似機能の実装がある THEN
    既存コードパターンに合わせる
ELSE
    architecture/system-architecture.md の基本方針に従う
END
```

### 🔀 エラーハンドリングの判断
```
常に standards/error-handling.md の統一パターンを適用:
- プロジェクト定義のレスポンス形式に従う
- 例外処理: プロジェクトの標準パターンを適用
- ステータスコード: プロジェクトの体系に従う
```

### 🔀 認証・認可の判断
```
IF features/authentication.md で認証要件がある THEN
    プロジェクトの認証・認可パターンを適用
ELSE IF 既存APIに認証パターンがある THEN
    既存パターンを踏襲
ELSE
    パブリックAPIとして実装
END
```

## 🚨 【必読】困った時の対処プロトコル

### ❓ 技術選択で迷った場合
1. `architecture/system-architecture.md` を確認
2. 既存コードベースで使用技術・パターンを調査
3. それでも不明 → **実装停止・確認要求**

### ❓ API設計で迷った場合
1. `features/[機能名].md` の実装例を確認
2. 既存APIエンドポイントのパターンを調査
3. `standards/error-handling.md` のレスポンス形式を適用

### ❓ UI設計で迷った場合
1. `features/[機能名].md` のコンポーネント例を確認
2. 既存UIコンポーネントの類似パターン調査
3. `architecture/system-architecture.md` のUI方針に従う

### ❓ データベース設計で迷った場合
1. `architecture/data-models.md` の統一スキーマ定義を確認
2. `features/[機能名].md` のデータモデル例を確認
3. 既存データベーススキーマのパターンを調査
4. プロジェクトの基本パターンを適用

## 🛠️ 問題解決手法 - デバッグ・トラブルシューティング

### 🚨 エラー発生時の体系的調査

#### 🔍 Phase 1: 問題の特定
```
1. エラーメッセージの正確な記録
   - 完全なエラーテキストをコピー
   - スタックトレースの確認
   - エラー発生のタイミング・条件を記録

2. 再現性の確認
   - 同じ操作で毎回発生するか
   - 特定の条件下でのみ発生するか
   - ブラウザ・環境による差異はないか

3. 影響範囲の特定
   - 一部機能のみか、全体への影響か
   - 特定のユーザー・データで発生するか
   - 他の関連機能への波及はないか
```

#### 🕵️ Phase 2: 原因の調査
```
1. ログ分析の優先順位
   - アプリケーションログ
   - サーバーログ（Webサーバー、DB等）
   - ブラウザコンソール（フロントエンド）
   - ネットワークタブ（API通信）

2. コード確認の手順
   - 最近の変更箇所から調査
   - エラーが発生する関数・メソッド周辺
   - 関連するデータフロー
   - 依存関係・ライブラリの確認

3. 環境・設定の確認
   - 環境変数の設定値
   - 設定ファイルの内容
   - 依存パッケージのバージョン
   - インフラ・ミドルウェアの状態
```

### 🔧 よくある問題パターンと解決法

#### 🌐 API・通信関連
```
問題: 「API呼び出しが失敗する」
調査手順:
1. ネットワークタブでHTTPステータス確認
2. リクエスト・レスポンス内容の確認
3. APIエンドポイントの存在確認
4. 認証・認可の設定確認
5. CORS設定の確認（フロントエンド）

解決パターン:
- 400系エラー → リクエスト内容・認証を確認
- 500系エラー → サーバーログを確認
- タイムアウト → サーバー負荷・DB処理時間を確認
```

#### 🗄️ データベース関連
```
問題: 「データベース操作でエラー」
調査手順:
1. SQLクエリ・ORM実行内容の確認
2. データベースログの確認
3. テーブル構造・制約の確認
4. データ型・制約違反の確認
5. インデックス・パフォーマンスの確認

解決パターン:
- 制約違反 → データバリデーション強化
- デッドロック → トランザクション見直し
- 性能問題 → インデックス・クエリ最適化
```

#### 🎨 UI・フロントエンド関連
```
問題: 「画面表示・操作で異常」
調査手順:
1. ブラウザコンソールエラーの確認
2. 要素の検証（DOM構造）
3. CSS・スタイル適用状況の確認
4. JavaScript実行状況の確認
5. レスポンシブデザインの確認

解決パターン:
- 表示崩れ → CSS競合・メディアクエリ確認
- 操作不可 → JavaScript実行エラー・イベント確認
- 性能問題 → リソース読み込み・レンダリング最適化
```

### 💡 効率的デバッグテクニック

#### 🎯 分割統治法
```
1. 問題を小さな単位に分割
   - 大きな機能を個別の処理に分解
   - 入力・処理・出力の段階に分けて確認
   - 依存関係を最小化して単体テスト

2. 仮説検証アプローチ
   - 最も可能性の高い原因から検証
   - 一つずつ要因を除外
   - 検証結果を記録して次の仮説立案
```

#### 🔬 実証的調査
```
1. ログ・デバッグ出力の活用
   - 処理の各段階で値を出力
   - 条件分岐の通過状況を確認
   - タイミング・性能の測定

2. 最小再現ケースの作成
   - 不要な要素を除外
   - 単純化した環境で再現
   - テストケースとして保存
```

### 🆘 エスカレーション判断

#### ⏰ 時間制限の設定
```
調査時間の目安:
- 軽微な問題: 30分～1時間
- 中程度の問題: 2～4時間  
- 重大な問題: 半日～1日

制限時間到達時:
→ 人間開発者への相談・エスカレーション
→ 調査内容・試行錯誤の記録を添付
```

#### 🚫 実装停止の判断基準
```
以下の場合は調査を停止して確認要求:
- セキュリティに関わる可能性がある問題
- データ損失のリスクがある問題
- システム全体への影響が不明な問題
- インフラ・環境の変更が必要な問題
```

## 🚫 【禁止】絶対にやってはいけないこと

```
❌ 指定外技術の使用
- architecture/system-architecture.md で指定された技術以外の使用

❌ エラーハンドリング標準違反
- standards/error-handling.md で定義された形式以外の使用

❌ 認証チェック忘れ
- features/authentication.md で認証要件があるのに実装忘れ

❌ データモデル標準違反
- architecture/data-models.md で定義された規約以外の使用
```

## ✅ 【推奨】正しいパターン

```
✅ 指定技術の厳守
- プロジェクトで決められた技術スタックの使用

✅ 統一エラーハンドリング
- standards/error-handling.md で定義された形式の厳守

✅ 適切な認証・認可
- プロジェクトの認証要件に応じた実装

✅ データモデル規約遵守
- プロジェクトで定義されたデータ構造・命名規則の適用
```

## 📋 実装開始前の必須確認

### Phase 1: ドキュメント確認（厳守順序）
1. `requirements/requirements.md` → 機能要件理解
2. `architecture/system-architecture.md` → 技術方針確認
3. `architecture/data-models.md` → データベーススキーマ確認（必要な場合）
4. `features/[機能名].md` → 実装パターン確認
5. `standards/error-handling.md` → エラー処理確認

### Phase 2: 品質確認
```
プロジェクトの品質確認設定に従う:
- package.json のscriptsセクション確認
- CI/CD設定ファイル確認
- プロジェクト固有のlinter・テスト設定適用
```

## ⚡ 実装戦略 - 段階的アプローチ

### 🎯 MVP（最小限動作）ファースト
```
1. 最小限の動作する機能から開始
   - 基本的なCRUD操作
   - 必須フィールドのみの実装
   - シンプルなUI/UX

2. 段階的機能拡張
   - 基本機能確認後に付加機能追加
   - 一度に複数機能を実装しない
   - 各段階でテスト・確認
```

### 🔄 実装サイクル（推奨）
```
Phase A: 基本構造
- データモデル定義
- 基本API作成
- 最小限UI作成
- 動作確認

Phase B: コア機能
- 主要ビジネスロジック実装
- バリデーション追加
- エラーハンドリング実装
- 基本テスト

Phase C: 拡張機能
- 付加価値機能追加
- UI/UX改善
- パフォーマンス最適化
- 包括的テスト
```

### 🚨 各段階の完了条件
```
✅ Phase A完了の判断基準:
- 基本的なデータの作成・取得・表示ができる
- エラーが発生せずに動作する
- 最低限のバリデーションが機能する

✅ Phase B完了の判断基準:
- すべての必須要件が実装済み
- エラーハンドリングが適切に動作
- セキュリティ要件が満たされている

✅ Phase C完了の判断基準:
- すべての要件が実装済み
- パフォーマンスが許容範囲内
- テストが包括的にカバーしている
```

### 📊 実装優先度の判断
```
高優先度（Phase A/B）:
- ユーザーが直接操作する核心機能
- セキュリティ関連機能
- データ整合性に関わる機能

中優先度（Phase B/C）:
- UI/UXの改善
- パフォーマンス最適化
- 利便性向上機能

低優先度（Phase C）:
- Nice-to-have機能
- 将来的な拡張性
- 高度なカスタマイズ機能
```

## ✅ 品質チェックリスト

### 🔍 実装完了前の必須確認

#### 📋 機能要件チェック
```
□ 要件定義通りの機能が実装されている
□ すべての必須フィールド・項目が含まれている
□ ユーザーストーリー・ユースケースが完了できる
□ エッジケース・例外ケースが考慮されている
□ 仕様書・設計書との整合性が取れている
```

#### 🔒 セキュリティチェック
```
□ 認証・認可が適切に実装されている
□ 入力値バリデーションが十分に行われている
□ SQLインジェクション対策が実装されている
□ XSS（クロスサイトスクリプティング）対策済み
□ CSRF（クロスサイトリクエストフォージェリ）対策済み
□ 機密情報の適切な暗号化・マスキング
□ ログに機密情報が出力されていない
```

#### 🗄️ データ整合性チェック
```
□ データベース制約が適切に設定されている
□ トランザクション処理が正しく実装されている
□ データ型・サイズ制限が適切に設定されている
□ 外部キー制約・リレーションが正しく設定されている
□ インデックスが適切に設定されている
□ データマイグレーションが安全に実行できる
```

#### 🌐 API・インターフェースチェック
```
□ APIレスポンス形式が standards/error-handling.md に準拠
□ HTTPステータスコードが適切に使用されている
□ リクエスト・レスポンスのバリデーションが実装されている
□ API仕様書（OpenAPI/Swagger等）との整合性
□ レート制限・スロットリングの考慮
□ CORS設定が適切に行われている（必要な場合）
```

#### 🎨 UI/UXチェック
```
□ デザイン仕様・モックアップとの整合性
□ レスポンシブデザインが適切に動作する
□ アクセシビリティ要件が満たされている
□ ユーザビリティテストが可能な状態
□ エラーメッセージがユーザーフレンドリー
□ ローディング・進捗表示が適切に実装されている
```

### 🧪 テスト・品質確認

#### 🔬 コードテスト
```
□ 単体テストが実装されている（重要な機能）
□ 統合テストが実行できる
□ テストカバレッジが適切な水準に達している
□ 境界値テスト・エラーケーステストが含まれている
□ 性能テスト・負荷テストが実行されている（必要な場合）
```

#### 🔍 コード品質
```
□ コーディング規約（standards/coding-style.md）に準拠
□ リンター・フォーマッターエラーがない
□ 未使用の変数・インポートが残っていない
□ ハードコーディングされた値が適切に設定ファイル化
□ 適切なコメント・ドキュメンテーションが記載されている
□ デッドコード・重複コードが除去されている
```

#### ⚡ パフォーマンスチェック
```
□ ページ読み込み時間が許容範囲内
□ データベースクエリが最適化されている
□ 不要なAPI呼び出しがない
□ 画像・リソースファイルが適切に最適化されている
□ キャッシュ戦略が適切に実装されている
□ メモリリークが発生していない
```

### 🚀 デプロイ・運用準備

#### 🔧 環境設定
```
□ 環境変数が適切に設定されている
□ 設定ファイルに本番用の値が反映されている
□ ログレベル・出力先が適切に設定されている
□ 監視・アラート設定が準備されている
□ バックアップ・リストア手順が確認されている
```

#### 📚 ドキュメント
```
□ README・セットアップ手順が更新されている
□ API仕様書が最新の状態に更新されている
□ 変更履歴・リリースノートが記載されている
□ 運用手順書が準備されている（必要な場合）
□ トラブルシューティングガイドが準備されている
```

### 🚨 リリース前最終確認

#### 🎯 総合確認
```
□ すべての要件が実装・テスト済み
□ セキュリティリスクが適切に評価・対策済み
□ 既存機能への影響が確認済み
□ ロールバック手順が準備されている
□ ステークホルダーへの報告・承認が完了している
```

#### ⏰ リリース判断基準
```
✅ Phase A リリース可能条件:
- 基本機能が動作する
- セキュリティ要件が満たされている
- 最低限のテストが完了している

✅ Phase B リリース可能条件:
- すべての必須要件が実装済み
- 包括的なテストが完了している
- 運用準備が整っている

✅ Phase C リリース可能条件:
- すべての品質基準をクリア
- パフォーマンス要件を満たしている
- 長期運用に対応できる品質
```

## 🔄 迷った時の優先順位

```
1. features/[機能名].md の実装例
2. architecture/data-models.md のデータ規約（DB関連の場合）
3. 既存コードの類似パターン  
4. architecture/system-architecture.md の基本方針
5. standards/ の規約
6. 不明な場合 → 実装停止・人間確認
```

## 📍 重要な参照先

- **技術仕様**: `architecture/system-architecture.md`
- **データモデル**: `architecture/data-models.md`
- **エラー処理**: `standards/error-handling.md`
- **認証**: `features/authentication.md`
- **ユーザー管理**: `features/user-management.md`
- **ダッシュボード**: `features/dashboard.md`

---

## ⚠️ 緊急時のエスケレーション

### 🚨 実装停止が必要な場合
- 技術選択が不明
- セキュリティ要件が不明
- ビジネスロジックが曖昧
- 既存システムへの影響が不明

### 📞 確認要求の出力形式
```
⚠️ AI実装停止: [理由]
📋 確認事項: [具体的な質問]
📂 関連ドキュメント: [確認済みドキュメント一覧]
⏰ 停止時刻: [タイムスタンプ]
```

## 📋 タスク完了時の必須更新ルール

### 🎯 タスク完了後の自動更新

**タスクが完了した場合、必ず以下のファイルを更新すること**:
- **対象ファイル**: `docs/tasks/current-tasks.md`

### ✅ 更新手順（必須）

#### **1. 完了タスクのマーク更新**
```
例: - TASK-BASE-001: プロジェクト基盤・Flaskアプリケーション初期化 ✅ **完了**
```

#### **2. 進捗状況セクション更新**
```markdown
### 1.5 プロジェクト進捗状況 📊
- **完了タスク**: [数字]タスク
- **進捗率**: [%] ([完了数]/24)
- **次回実装対象**: [次のタスク名]

**完了済みタスク**:
- ✅ [タスク名] ([完了日]完了)
```

#### **3. フェーズ進捗更新**
```markdown
**実装フェーズ状況**:
- 📋 **フェーズ1（環境構築・基盤実装）**: [数]/7タスク完了 ([%])
```

#### **4. 変更履歴記録**
```markdown
### 9.3 変更履歴
| [日付] | [バージョン] | [完了タスク]完了ステータス更新・進捗率[%]に更新 | AI システム |
```

### 🚨 重要な注意事項

- **タスク完了時の更新は必須作業**
- **進捗率は正確に計算すること** (完了タスク数/24 × 100)
- **次回実装対象は次のタスクIDを正確に記載**
- **完了日は実際の完了日を記録**
- **バージョン番号は適切にインクリメント**

### 📊 進捗追跡の目的

- **リアルタイム進捗可視化**
- **完了タスクの明確な記録**
- **次のタスクの明確化**
- **プロジェクト全体の進捗把握**
- **変更履歴の適切な管理**

---

**このドキュメントに従うことで、AIはプロジェクトの技術スタックに関係なく一貫性のある高品質な実装を自走で実現できます。**


