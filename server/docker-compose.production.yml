# 本番環境用Docker Compose
# 本番環境での運用を想定した構成

version: '3.8'

services:
  # メインアプリケーション
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: studix-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - SHEET_ID_ORDERS=${SHEET_ID_ORDERS}
      - SHEET_ID_REQUESTS=${SHEET_ID_REQUESTS}
      - GOOGLE_CREDENTIALS_PATH=${GOOGLE_CREDENTIALS_PATH}
      - LOG_LEVEL=warn
      - CORS_ORIGIN=${CORS_ORIGIN}
    volumes:
      - app-logs:/var/log/studix
      - app-backups:/var/backups/studix
      - ./data:/app/data:ro
    depends_on:
      - redis
    networks:
      - studix-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (セッション管理・キャッシュ用)
  redis:
    image: redis:7-alpine
    container_name: studix-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - studix-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (リバースプロキシ・SSL終端)
  nginx:
    image: nginx:alpine
    container_name: studix-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - studix-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 監視・メトリクス収集
  prometheus:
    image: prom/prometheus:latest
    container_name: studix-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - studix-network

  # Grafana (ダッシュボード)
  grafana:
    image: grafana/grafana:latest
    container_name: studix-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - studix-network

  # バックアップサービス
  backup:
    image: alpine:latest
    container_name: studix-backup
    restart: "no"
    volumes:
      - app-backups:/backup
      - ./scripts:/scripts:ro
    command: ["/bin/sh", "-c", "while true; do /scripts/backup.js create; sleep 86400; done"]
    networks:
      - studix-network

volumes:
  app-logs:
    driver: local
  app-backups:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  studix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
